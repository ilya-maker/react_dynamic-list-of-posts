{"version":3,"sources":["api.ts","App.tsx","index.tsx"],"names":["getDataFromServer","url","fetch","then","response","json","App","useState","posts","setPosts","loading","setLoading","error","setError","query","setQuery","handleLoadClick","a","postsFromServer","commentsFromServer","usersFromServer","postsWithUsersAndComments","map","post","user","find","id","userId","comment","filter","postId","filterMovieList","title","body","toLowerCase","includes","length","type","onChange","event","target","value","key","name","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"sPAuBMA,G,MAAoB,SAAIC,GAC5B,OAAOC,MAxBO,uCAwBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YC0DhBC,EA1EH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,OAIUN,mBAAiB,IAJ3B,mBAITO,EAJS,KAIFC,EAJE,KAMVC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBN,GAAW,GADW,kBDaIX,EAAwB,UCb5B,cAIdkB,EAJc,gBDeOlB,EAA2B,aCflC,cAKdmB,EALc,iBDcInB,EAAwB,UCd5B,QAMdoB,EANc,OAQdC,EAAoCH,EAAgBI,KAAI,SAAAC,GAAI,kCAC7DA,GAD6D,IAEhEC,KAAMJ,EAAgBK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,UACpDC,QAAST,EAAmBU,QAAO,SAAAD,GAAO,OAAIA,EAAQE,SAAWP,EAAKG,WAGxEjB,EAASY,GAdW,kDAgBpBR,EAAS,iBAhBW,QAmBtBF,GAAW,GAnBW,0DAAH,qDAsBfoB,EAAkBvB,EACrBqB,QAAO,qBAAGG,MAAH,EAAUC,MACfC,cACAC,SAASrB,EAAMoB,kBAEpB,OACE,oCACE,qDACE1B,EAAM4B,OAeN,4BACE,2BAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAK,OAAKxB,EAASwB,EAAMC,OAAOC,UAC5DV,EAAgBT,KAAI,SAAAC,GAAI,OACvB,wBAAImB,IAAKnB,EAAKG,IACZ,qCAAOH,EAAKG,GAAZ,aAAmBH,EAAKS,QACxB,2CAAaT,EAAKU,OAClB,2CAAaV,EAAKC,KAAOD,EAAKC,KAAKmB,KAAO,YAC1C,4BACGpB,EAAKK,QAAUL,EAAKK,QAAQN,KAAI,SAAAM,GAAO,OACtC,wBAAIc,IAAKd,EAAQF,IACf,2CAAaE,EAAQe,OACrB,2CAAaf,EAAQK,WAEpB,gBA3Bb,oCACE,4BAAQI,KAAK,SAASO,QAAS5B,EAAiB6B,SAAUnC,GACvDA,EAAU,aAAe,QAE3BE,GACC,oCACE,8BAAOA,GACP,4BAAQyB,KAAK,SAASO,QAAS5B,EAAiB6B,SAAUnC,GAA1D,iBChDdoC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1f467d49.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface Post {\n  id: number;\n  userId: number;\n  body: string;\n  title: string;\n  user?: User;\n  comment?: Comment[];\n}\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Comment {\n  id: number;\n  postId: number;\n  body: string;\n  name: string;\n}\n\nconst getDataFromServer = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getPosts = () => getDataFromServer<Post>('/posts');\nexport const getUsers = () => getDataFromServer<User>('/users');\nexport const getComments = () => getDataFromServer<Comment>('/comments');\n","import React, { useState } from 'react';\nimport './App.css';\nimport {\n  getComments,\n  getPosts,\n  getUsers,\n  Post,\n} from './api';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [query, setQuery] = useState<string>('');\n\n  const handleLoadClick = async () => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getPosts();\n      const commentsFromServer = await getComments();\n      const usersFromServer = await getUsers();\n\n      const postsWithUsersAndComments: Post[] = postsFromServer.map(post => ({\n        ...post,\n        user: usersFromServer.find(user => user.id === post.userId),\n        comment: commentsFromServer.filter(comment => comment.postId === post.id),\n      }));\n\n      setPosts(postsWithUsersAndComments);\n    } catch (e) {\n      setError('Loading error');\n    }\n\n    setLoading(false);\n  };\n\n  const filterMovieList = posts\n    .filter(({ title, body }) => (title + body)\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      {!posts.length ? (\n        <>\n          <button type=\"button\" onClick={handleLoadClick} disabled={loading}>\n            {loading ? 'Loading...' : 'load'}\n          </button>\n          {error && (\n            <>\n              <span>{error}</span>\n              <button type=\"button\" onClick={handleLoadClick} disabled={loading}>\n                try again\n              </button>\n            </>\n          )}\n        </>\n      ) : (\n        <ul>\n          <input type=\"text\" onChange={event => (setQuery(event.target.value))} />\n          {filterMovieList.map(post => (\n            <li key={post.id}>\n              <p>{`${post.id}. ${post.title}`}</p>\n              <p>{`body: ${post.body}`}</p>\n              <p>{`user: ${post.user ? post.user.name : 'Unknown'}`}</p>\n              <ul>\n                {post.comment ? post.comment.map(comment => (\n                  <li key={comment.id}>\n                    <p>{`name: ${comment.name}`}</p>\n                    <p>{`body: ${comment.body}`}</p>\n                  </li>\n                )) : 'Unknown'}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}