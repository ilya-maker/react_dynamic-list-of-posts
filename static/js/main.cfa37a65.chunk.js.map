{"version":3,"sources":["api.ts","App.tsx","index.tsx"],"names":["getDataFromServer","url","fetch","then","response","json","App","useState","posts","setPosts","loading","setLoading","error","setError","query","setQuery","handleLoadClick","a","postsFromServer","commentsFromServer","usersFromServer","postsWithUsersAndComments","map","post","user","find","id","userId","comments","filter","comment","postId","filterMovieList","useMemo","title","body","toLowerCase","includes","className","length","type","onChange","event","target","value","key","name","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"sPAuBMA,G,MAAoB,SAAIC,GAC5B,OAAOC,MAxBO,uCAwBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YC4DhBC,EA5EH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,OAIUN,mBAAiB,IAJ3B,mBAITO,EAJS,KAIFC,EAJE,KAMVC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBN,GAAW,GADW,kBDaIX,EAAwB,UCb5B,cAIdkB,EAJc,gBDeOlB,EAA2B,aCflC,cAKdmB,EALc,iBDcInB,EAAwB,UCd5B,QAMdoB,EANc,OAQdC,EAAoCH,EAAgBI,KAAI,SAAAC,GAAI,kCAC7DA,GAD6D,IAEhEC,KAAMJ,EAAgBK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,UACpDC,SAAUT,EAAmBU,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWR,EAAKG,WAGzEjB,EAASY,GAdW,kDAgBpBR,EAAS,iBAhBW,QAmBtBF,GAAW,GAnBW,0DAAH,qDAsBfqB,EAAkBC,mBAAQ,kBAC9BzB,EACGqB,QAAO,qBAAGK,MAAH,EAAUC,MACfC,cACAC,SAASvB,EAAMsB,oBACnB,CAACtB,EAAON,IAEX,OACE,yBAAK8B,UAAU,OACb,qDACE9B,EAAM+B,OAeN,wBAAID,UAAU,YACZ,2BAAOE,KAAK,OAAOC,SAAU,SAAAC,GAAK,OAAK3B,EAAS2B,EAAMC,OAAOC,UAC5DZ,EAAgBV,KAAI,SAAAC,GAAI,OACvB,wBAAIsB,IAAKtB,EAAKG,GAAIY,UAAU,kBAC1B,uBAAGA,UAAU,eAAb,UAA+Bf,EAAKG,GAApC,aAA2CH,EAAKW,QAChD,uBAAGI,UAAU,cAAb,gBAAoCf,EAAKY,OACzC,uBAAGG,UAAU,QAAb,gBAA8Bf,EAAKC,KAAOD,EAAKC,KAAKsB,KAAO,YAC3D,wBAAIR,UAAU,YACXf,EAAKK,SAAWL,EAAKK,SAASN,KAAI,SAAAQ,GAAO,OACxC,wBAAIe,IAAKf,EAAQJ,GAAIY,UAAU,kBAC7B,uBAAGA,UAAU,kBAAb,gBAAwCR,EAAQgB,OAChD,2CAAahB,EAAQK,WAEpB,gBA3Bb,oCACE,4BAAQK,KAAK,SAASO,QAAS/B,EAAiBgC,SAAUtC,GACvDA,EAAU,aAAe,QAE3BE,GACC,oCACE,8BAAOA,GACP,4BAAQ4B,KAAK,SAASO,QAAS/B,EAAiBgC,SAAUtC,GAA1D,iBClDduC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.cfa37a65.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface Post {\n  id: number;\n  userId: number;\n  body: string;\n  title: string;\n  user?: User;\n  comments?: Comment[];\n}\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Comment {\n  id: number;\n  postId: number;\n  body: string;\n  name: string;\n}\n\nconst getDataFromServer = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getPosts = () => getDataFromServer<Post>('/posts');\nexport const getUsers = () => getDataFromServer<User>('/users');\nexport const getComments = () => getDataFromServer<Comment>('/comments');\n","import React, { useMemo, useState } from 'react';\nimport './App.css';\nimport {\n  getComments,\n  getPosts,\n  getUsers,\n  Post,\n} from './api';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [query, setQuery] = useState<string>('');\n\n  const handleLoadClick = async () => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getPosts();\n      const commentsFromServer = await getComments();\n      const usersFromServer = await getUsers();\n\n      const postsWithUsersAndComments: Post[] = postsFromServer.map(post => ({\n        ...post,\n        user: usersFromServer.find(user => user.id === post.userId),\n        comments: commentsFromServer.filter(comment => comment.postId === post.id),\n      }));\n\n      setPosts(postsWithUsersAndComments);\n    } catch (e) {\n      setError('Loading error');\n    }\n\n    setLoading(false);\n  };\n\n  const filterMovieList = useMemo(() => (\n    posts\n      .filter(({ title, body }) => (title + body)\n        .toLowerCase()\n        .includes(query.toLowerCase()))\n  ), [query, posts]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!posts.length ? (\n        <>\n          <button type=\"button\" onClick={handleLoadClick} disabled={loading}>\n            {loading ? 'Loading...' : 'load'}\n          </button>\n          {error && (\n            <>\n              <span>{error}</span>\n              <button type=\"button\" onClick={handleLoadClick} disabled={loading}>\n                try again\n              </button>\n            </>\n          )}\n        </>\n      ) : (\n        <ul className=\"postList\">\n          <input type=\"text\" onChange={event => (setQuery(event.target.value))} />\n          {filterMovieList.map(post => (\n            <li key={post.id} className=\"postList__item\">\n              <p className=\"post__title\">{`${post.id}. ${post.title}`}</p>\n              <p className=\"post__body\">{`body: ${post.body}`}</p>\n              <p className=\"user\">{`user: ${post.user ? post.user.name : 'Unknown'}`}</p>\n              <ul className=\"comments\">\n                {post.comments ? post.comments.map(comment => (\n                  <li key={comment.id} className=\"comments__item\">\n                    <p className=\"comment__title\">{`name: ${comment.name}`}</p>\n                    <p>{`body: ${comment.body}`}</p>\n                  </li>\n                )) : 'Unknown'}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}